import { MailerService } from '@nestjs-modules/mailer';
import { Inject, Injectable, Logger } from '@nestjs/common';
import { MailDto } from './dto/mail.dto';
import { EMAIL_TEMPLATES } from 'src/common/constants/templates';
import { CacheService } from 'src/shared/cache/cache.service';
import { CACHE_MANAGER } from '@nestjs/cache-manager';
import { Cache } from 'cache-manager';
import { onDutyTemplates } from './templates/onDuty.template';
import { TemplateStatus, TemplateType } from 'src/common/constants/constants';
import { LeaveTemplates } from './templates/leaves.template';

interface User {
  email: string;
  name: string;
}
@Injectable()
export class MailService {
  private readonly logger = new Logger(MailService.name);
  constructor(
    private mailerService: MailerService,
    private cacheService: CacheService,
    @Inject(CACHE_MANAGER) private cacheManager: Cache,
  ) {}
private getTemplate(templateType: TemplateType, status: TemplateStatus) {
    switch(templateType) {
      case 'leave':
        return LeaveTemplates[status];
      case 'onDuty':
        return onDutyTemplates[status];
      default:
        throw new Error('Invalid template type');
    }
  }
  sendMail(
    templatedata: any,
    mailData: any,
    toEmail: any,
    subject: string,
  ) {
    try {
      let values = templatedata.split('?');
      this.mailerService.sendMail({
        to: toEmail,
        from: `${mailData.generatedBy}<sales@amoghbuildtech.com>`, // override default from
        bcc: 'rishabh@amoghbuildtech.com',
        subject: subject ? subject : 'Lead Added',
        context: {
          // ✏️ filling curly brackets with content
          name: mailData?.name,
        },
        html: values.map((value) => `<div>${value}</div>`).join(''),
      }).catch((error)=>this.logger.error("error in mail service",error));
    } catch (error: any) {
      this.logger.error("error in mail service",error);
    }
  }

  generateMessage(
    template: string,
    name: string,
    leadId: string,
    leadSouce: any,
    dateTime: any,
  ) {
    const message = template
      .replace('{name}', name)
      .replace('{leads}', leadId)
      .replace('{leadSource}', leadSouce.source)
      .replace('{projectname}', leadSouce.projectName)
      .replace('{date}', dateTime);
    return message;
  }

  async send(templateId: any, data: any, notification: boolean = true) {
    if (notification) {
      let toEmail = await this.cacheService.getEmailById(data.userId);
      let name = await this.cacheService.getNameById(data.userId);
      data.generatedBy = name;
      let dateTime = new Date().toLocaleString();
      let message = this.generateMessage(
        EMAIL_TEMPLATES[templateId],
        name,
        data.uid,
        data.leadSource,
        dateTime,
      );
      this.sendMail(message, data, toEmail, '');
    }
  }

  async sendByForm(data: any) {
    try {
      let toEmail = data.headMail;
      let dateTime = new Date().toLocaleDateString('en-IN', {
        year: 'numeric',
        day: 'numeric',
        month: 'long',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        hour12: true,
      });
      let message = `LeadSource- ${data?.leadSource}? Lead Source url- ${data.url}?  New lead Genarated Date and Time- ${dateTime}? Lead Generated by- ${data.generatedBy}? Lead generated team Head- ${toEmail}? 
    Project- ${data.project}? Name-${data.name}?Phone Number- ${data.mobile}? Email- ${data.email}? Remark- ${data.message} `;
      this.sendMail(
        message,
        data,
        toEmail,
        `${data.generatedBy} Lead by ${data.leadSource} for ${data.project}- ${dateTime}`,
      );
    } catch (error: any) {
      this.logger.error('Error in sending email');
    }
  }
  

  async sendMailTemplate(
    to: string,
    templateType: TemplateType,
    status: TemplateStatus,
    templateVars: {
      recipientName?: string;
      employeeName?: string;
      type?: string;
      fromDate?: string;
      toDate?: string;
      reason?: string;
      statusUpadtedBy?: string;
      managerName?: string;
      rejectionReason?: string;
    }
  ) {
    try {
      // Get the correct template
      const template = this.getTemplate(templateType, status);

      // Function to replace variables in a string
      
      const replaceVariables = (text: string) => {
        return Object.keys(templateVars).reduce((result, key) => {
          return result.replace(
            new RegExp(`{{${key}}}`, 'g'), 
            templateVars[key] || ''
          );
        }, text);
      };

      // Replace variables in both subject and template
      const emailSubject = replaceVariables(template.subject);
      const emailContent = replaceVariables(template.template);

      // Send the email
      await this.mailerService.sendMail({
        to: to,
        subject: emailSubject,
        html: emailContent
      });
      this.logger.log("email conte",emailContent,to)
      return { subject: emailSubject, content: emailContent };
    } catch (error) {
      console.error('Error sending email:', error);
      throw error;
    }
  }
}
